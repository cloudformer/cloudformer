AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  routetableidParameter:
    Type: String
    Default: 'rtb-0be06408c402a9185'
    Description: Enter route_table ID . Default is RTB.
  newgatewayidParameter:
    Type: String
    Default: 'eni-02101d5460aaa74d6'
    Description: Enter new_gateway ID . Default is ENI.

Resources:
  EC2StartLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          def lambda_handler(event, context):
                         
              region = 'us-east-1'
              ec2 = boto3.client('ec2',region_name=region)

              route_table_id = 'rtb-0be06408c402a9185'
              new_gateway_id = 'eni-02101d5460aaa74d6'
              # new_gateway_id = 'eni-0676607edac0dab2b'

              response = ec2.describe_route_tables(
                  RouteTableIds=[route_table_id]
              )
              # print(json.dumps(response, indent=4))
              # get the default route of the route table

              for route in response['RouteTables'][0].get('Routes'):
                  if route.get('DestinationCidrBlock') == '0.0.0.0/0':
                      old_gateway_id = route.get('NetworkInterfaceId')
                      break
              response = ec2.describe_route_tables(
                  RouteTableIds=[route_table_id]
              )


              # replace the default route with the new gateway
              response = ec2.replace_route(
                  RouteTableId=route_table_id,
                  DestinationCidrBlock='0.0.0.0/0',
                  NetworkInterfaceId=new_gateway_id
              )
              print(f"The old gateway is {old_gateway_id}.")
              print(f"change the new gateway is {new_gateway_id}.")
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Timeout: 30
#  StartScheduledRule:
#    Type: 'AWS::Events::Rule'
#    Properties:
#      Name: 'DailyStartEC2Instances'
#      ScheduleExpression: 'cron(0 9 * * ? *)' #每天上午9点执行
#      Targets:
#        - Arn: !GetAtt PermissionForEventsToInvokeLambda.Arn
#          Id: 'TargetFunctionV1'
#
#  LambdaStartExecutionPermission:
#    Type: 'AWS::Lambda::Permission'
#    Properties:
#      Action: 'lambda:InvokeFunction'
#      FunctionName: !Ref EC2StartLambdaFunction
#      Principal: 'events.amazonaws.com'
#      SourceArn: !GetAtt StartScheduledRule.Arn


  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "EventRule"
      EventPattern:
        source:
          - "aws.ec2"
        detail-type:
          - "EC2 Instance State-change Notification"
        detail:
          state:
            - "stopping"
        resources:
          - arn:aws:ec2:*:*:instance/i-0966c1b6595d88e90
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt EC2StartLambdaFunction.Arn
          Id: "TargetFunctionV1"
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        !Ref EC2StartLambdaFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "EventRule"
          - "Arn"
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
        Version: '2012-10-17'
      Path: '/'
      Policies:
        - PolicyName: 'ec2-start-stop'
          PolicyDocument:
            Statement:
              - Action:
                  - "ec2:DescribeRouteTables"
                  - "ec2:DescribeVpcs"
                  - "ec2:ReplaceRoute"
                Effect: 'Allow'
                Resource: '*'
