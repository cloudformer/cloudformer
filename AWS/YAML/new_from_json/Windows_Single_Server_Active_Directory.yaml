AWSTemplateFormatVersion: '2010-09-09'
Description: This template creates a single server installation of Active Directory.
  Domain Administrator password will be the one retrieved from the instance. For adding
  members to the domain, ensure that they are launched in domain member security group
  created by this template and then configure them to use this instance's private
  IP as the DNS server. **WARNING** This template creates Amazon EC2 Windows instance
  and related resources. You will be billed for the AWS resources used if you create
  a stack from this template.
Mappings:
  AWSRegion2AMI:
    af-south-1:
      Windows2008r2: NOT_SUPPORTED
      Windows2012r2: ami-06a594bb3971e4d1b
    ap-east-1:
      Windows2008r2: NOT_SUPPORTED
      Windows2012r2: ami-0007cdd6170a2175f
    ap-northeast-1:
      Windows2008r2: ami-085c81c14a7b381ca
      Windows2012r2: ami-0ddc626ddec721c46
    ap-northeast-2:
      Windows2008r2: ami-088344835427780e6
      Windows2012r2: ami-0529040055f54cedc
    ap-northeast-3:
      Windows2008r2: ami-0cee4466916e5a052
      Windows2012r2: ami-0c952cb0181ec7aea
    ap-south-1:
      Windows2008r2: ami-0fd8cc2e22ab2adda
      Windows2012r2: ami-015f0e5c464a8512a
    ap-southeast-1:
      Windows2008r2: ami-0495e047d2d1badaa
      Windows2012r2: ami-0a056a958e42c5eea
    ap-southeast-2:
      Windows2008r2: ami-015a1163c733ed7f2
      Windows2012r2: ami-0ff8c6c8a57b86baf
    ca-central-1:
      Windows2008r2: ami-0afa7c1dbb0b9d1d1
      Windows2012r2: ami-036eeef0b441e4372
    cn-north-1:
      Windows2008r2: NOT_SUPPORTED
      Windows2012r2: ami-0b917c20d0711b700
    cn-northwest-1:
      Windows2008r2: NOT_SUPPORTED
      Windows2012r2: ami-0bc015932aee44fa8
    eu-central-1:
      Windows2008r2: ami-056afe0639d091031
      Windows2012r2: ami-03df16a8a966441bb
    eu-north-1:
      Windows2008r2: ami-099397d9c5ef80746
      Windows2012r2: ami-0a1f0facb83b9dfa6
    eu-south-1:
      Windows2008r2: NOT_SUPPORTED
      Windows2012r2: ami-0aae7c4f3141a0f11
    eu-west-1:
      Windows2008r2: ami-09eefdfde3f696305
      Windows2012r2: ami-0affaaca0d400ed4c
    eu-west-2:
      Windows2008r2: ami-0eca562c3df3c8a6b
      Windows2012r2: ami-090b023339b2e8c50
    eu-west-3:
      Windows2008r2: ami-0b3d55b8cd5b7f54b
      Windows2012r2: ami-0c140e6c56a0df4f2
    me-south-1:
      Windows2008r2: NOT_SUPPORTED
      Windows2012r2: ami-0a8f97d5eedb179f4
    sa-east-1:
      Windows2008r2: ami-04c78ad2bd0a5dd3c
      Windows2012r2: ami-077b4b1ed505fa38b
    us-east-1:
      Windows2008r2: ami-02fa4836310cbeccd
      Windows2012r2: ami-003a480a3489b1c5c
    us-east-2:
      Windows2008r2: ami-038739908c6a12458
      Windows2012r2: ami-0920445e689437bbf
    us-west-1:
      Windows2008r2: ami-0eb6f805520147bde
      Windows2012r2: ami-0c739d683f3eb652e
    us-west-2:
      Windows2008r2: ami-0e56450bb7dc3d34b
      Windows2012r2: ami-0555de2823859bc40
Outputs:
  DomainAdmin:
    Description: Default domain administrator account
    Value:
      Fn::Join:
      - ''
      - - Ref: DomainNetBIOSName
        - \Administrator
  DomainAdminPassword:
    Value: Please retrieve Administrator password of the instance
  DomainControllerDNSName:
    Description: Public DNS name of Active Directory server for RDP connection
    Value:
      Fn::GetAtt:
      - DomainController
      - PublicDnsName
  DomainControllerIP:
    Description: Private IP address of Active Directory server which is also a DNS
      server
    Value:
      Fn::GetAtt:
      - DomainController
      - PrivateIp
Parameters:
  DomainDNSName:
    AllowedPattern: '[a-zA-Z0-9]+\..+'
    Description: Fully qualified domain name (FQDN) of the forest root domain e.g.
      corp.example.com
    MaxLength: '25'
    MinLength: '3'
    Type: String
  DomainNetBIOSName:
    AllowedPattern: '[a-zA-Z0-9]+'
    Description: NetBIOS name of the domain (upto 15 characters) for users of earlier
      versions of Windows e.g. CORP
    MaxLength: '15'
    MinLength: '1'
    Type: String
  InstanceType:
    AllowedValues:
    - t1.micro
    - t2.micro
    - t2.small
    - t2.medium
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c1.medium
    - c1.xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    Default: m4.large
    Description: Amazon EC2 instance type
    Type: String
  KeyName:
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair
    Type: AWS::EC2::KeyPair::KeyName
  RestoreModePassword:
    AllowedPattern: (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    Description: Password for a separate Administrator account when the domain controller
      is in Restore Mode. Must be at least 8 characters containing letters, numbers
      and symbols
    MaxLength: '32'
    MinLength: '8'
    NoEcho: 'True'
    Type: String
  SourceCidrForRDP:
    AllowedPattern: ^([0-9]+\.){3}[0-9]+\/[0-9]+$
    Description: IP Cidr from which you are likely to RDP into the instances. You
      can add rules later by modifying the created security groups e.g. 54.32.98.160/32
    MaxLength: '18'
    MinLength: '9'
    Type: String
Resources:
  DomainController:
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            1-run-dcpromo:
              command:
                Fn::Join:
                - ''
                - - 'C:\cfn\RunCommand.bat "dcpromo /unattend  /ReplicaOrNewDomain:Domain  /NewDomain:Forest  /NewDomainDNSName:'
                  - Ref: DomainDNSName
                  - '  /ForestLevel:4 /DomainNetbiosName:'
                  - Ref: DomainNetBIOSName
                  - ' /DomainLevel:4  /InstallDNS:Yes  /ConfirmGc:Yes  /CreateDNSDelegation:No  /DatabasePath:"C:\Windows\NTDS"  /LogPath:"C:\Windows\NTDS"  /SYSVOLPath:"C:\Windows\SYSVOL"
                    /SafeModeAdminPassword='
                  - Ref: RestoreModePassword
                  - ' /RebootOnCompletion:Yes"'
              waitAfterCompletion: forever
            2-signal-success:
              command:
                Fn::Join:
                - ''
                - - cfn-signal.exe -e 0 "
                  - Fn::Base64:
                      Ref: DomainControllerWaitHandle
                  - '"'
          files:
            C:\cfn\RunCommand.bat:
              content: '%~1

                IF %ERRORLEVEL% GTR 10 ( exit /b 1 ) else ( exit /b 0 )'
            c:\cfn\cfn-hup.conf:
              content:
                Fn::Join:
                - ''
                - - '[main]

                    '
                  - stack=
                  - Ref: AWS::StackId
                  - '

                    '
                  - region=
                  - Ref: AWS::Region
                  - '

                    '
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content:
                Fn::Join:
                - ''
                - - '[cfn-auto-reloader-hook]

                    '
                  - 'triggers=post.update

                    '
                  - 'path=Resources.DomainController.Metadata.AWS::CloudFormation::Init

                    '
                  - 'action=cfn-init.exe -v -s '
                  - Ref: AWS::StackId
                  - ' -r DomainController'
                  - ' --region '
                  - Ref: AWS::Region
                  - '

                    '
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - c:\cfn\cfn-hup.conf
                - c:\cfn\hooks.d\cfn-auto-reloader.conf
    Properties:
      ImageId:
        Fn::FindInMap:
        - AWSRegion2AMI
        - Ref: AWS::Region
        - Windows2012r2
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      SecurityGroups:
      - Ref: DomainControllerSecurityGroup
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - '<script>

              '
            - 'cfn-init.exe -v -s '
            - Ref: AWS::StackId
            - ' -r DomainController '
            - ' --region '
            - Ref: AWS::Region
            - '

              '
            - </script>
    Type: AWS::EC2::Instance
  DomainControllerSecurityGroup:
    Properties:
      GroupDescription: Domain Controller
      SecurityGroupIngress:
      - FromPort: '123'
        IpProtocol: udp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '123'
      - FromPort: '135'
        IpProtocol: tcp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '135'
      - FromPort: '138'
        IpProtocol: udp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '138'
      - FromPort: '1024'
        IpProtocol: tcp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '65535'
      - FromPort: '389'
        IpProtocol: tcp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '389'
      - FromPort: '389'
        IpProtocol: udp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '389'
      - FromPort: '636'
        IpProtocol: tcp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '636'
      - FromPort: '3268'
        IpProtocol: tcp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '3268'
      - FromPort: '3269'
        IpProtocol: tcp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '3269'
      - FromPort: '53'
        IpProtocol: tcp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '53'
      - FromPort: '53'
        IpProtocol: udp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '53'
      - FromPort: '88'
        IpProtocol: tcp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '88'
      - FromPort: '88'
        IpProtocol: udp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '88'
      - FromPort: '445'
        IpProtocol: tcp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '445'
      - FromPort: '445'
        IpProtocol: udp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '445'
      - FromPort: '135'
        IpProtocol: udp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '135'
      - CidrIp:
          Ref: SourceCidrForRDP
        FromPort: '3389'
        IpProtocol: tcp
        ToPort: '3389'
      - FromPort: '-1'
        IpProtocol: icmp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '-1'
    Type: AWS::EC2::SecurityGroup
  DomainControllerWaitCondition:
    DependsOn: DomainController
    Properties:
      Handle:
        Ref: DomainControllerWaitHandle
      Timeout: '1500'
    Type: AWS::CloudFormation::WaitCondition
  DomainControllerWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  DomainMemberSecurityGroup:
    Properties:
      GroupDescription: Domain Members
      SecurityGroupIngress: []
    Type: AWS::EC2::SecurityGroup
  DomainMemberSecurityGroupIngress1:
    Properties:
      CidrIp:
        Ref: SourceCidrForRDP
      FromPort: '3389'
      GroupName:
        Ref: DomainMemberSecurityGroup
      IpProtocol: tcp
      ToPort: '3389'
    Type: AWS::EC2::SecurityGroupIngress
